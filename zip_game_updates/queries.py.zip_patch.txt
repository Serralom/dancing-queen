
# ... Dentro de `save_results`, declara base_date para zip:
zip_base_date = pendulum.parse('2025-01-01')
zip_game_number = pendulum.now().diff(zip_base_date).in_days()

# ... En los bloques de inserción, añade:
elif juego == 'zip':
    c.execute('''INSERT INTO public.resultados (nombre, juego, numero_juego, tiempo, fecha_hora)
        VALUES (%s, %s, %s, %s, %s)''', (nombre, juego, zip_game_number, tiempo, fecha_hora))

# ... Añadir limpieza de victorias y cálculo de victoria diaria para zip:
c.execute('''DELETE FROM public.victorias WHERE numero_juego = %s AND juego = 'zip' ''', (zip_game_number,))
c.execute('''
    INSERT INTO public.victorias (nombre, juego, numero_juego, tiempo)
    SELECT nombre, juego, numero_juego, tiempo 
    FROM public.resultados
    WHERE numero_juego = %s AND juego = 'zip' 
    AND tiempo = (SELECT MIN(tiempo) FROM public.resultados WHERE numero_juego = %s AND juego = 'zip')
''', (zip_game_number, zip_game_number))

# ... Dentro de get_ranking y get_historical_ranking no es necesario modificar mientras se pase "zip" como argumento.

# ... Dentro de `get_top_precoces` añade lógica para zip similar a tango y queens.
# ... Dentro de `get_average_times`, amplía con AVG(CASE WHEN juego = 'zip' THEN tiempo END) AS avg_zip
